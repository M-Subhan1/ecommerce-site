generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model account {
  email            String    @id @db.VarChar(255)
  password         String    @db.VarChar(255)
  first_name       String    @db.VarChar(100)
  last_name        String    @db.VarChar(100)
  is_verified      Boolean?  @default(false)
  token_string     String    @default(dbgenerated("uuid_generate_v1()")) @db.Uuid
  token_updated_at DateTime  @default(now()) @db.Timestamp(6)
  token_is_valid   Boolean   @default(true)
  customer         customer?
  orders           orders[]
  review           review[]
}

model customer {
  email   String  @id @db.VarChar(255)
  rating  Int     @default(0)
  street  String  @db.VarChar(255)
  city    String  @db.VarChar(255)
  state   String  @db.VarChar(255)
  country String  @db.VarChar(255)
  account account @relation(fields: [email], references: [email], onDelete: Cascade)
}

model product {
  product_id          Int          @id @default(autoincrement())
  product_name        String       @db.VarChar(255)
  product_description String       @db.VarChar(1000)
  brand               String       @db.VarChar(255)
  price               Float        @db.Real
  stock               Int          @default(0)
  units_sold          Int          @default(0)
  discount            Float        @default(0) @db.Real
  cart_list           cart_list[]
  order_list          order_list[]
  review              review[]
}

model review {
  review_id  Int      @id @default(autoincrement())
  rating     Float    @db.Real
  text       String   @db.VarChar(500)
  email      String?  @db.VarChar(255)
  product_id Int?
  account    account? @relation(fields: [email], references: [email], onDelete: Cascade)
  product    product? @relation(fields: [product_id], references: [product_id], onDelete: Cascade)
}

model order_list {
  order_id   Int
  product_id Int
  units      Int     @default(1)
  discount   Int     @default(0)
  price      Float   @db.Real
  orders     orders  @relation(fields: [order_id], references: [order_id], onDelete: NoAction, onUpdate: NoAction)
  product    product @relation(fields: [product_id], references: [product_id], onDelete: NoAction, onUpdate: NoAction)

  @@id([product_id, order_id])
}

model orders {
  order_id      Int          @id @default(autoincrement())
  amount_paid   Float        @default(0) @db.Real
  email         String       @db.VarChar(255)
  street        String       @db.VarChar(255)
  city          String       @db.VarChar(255)
  state         String       @db.VarChar(255)
  country       String       @db.VarChar(255)
  phone_number  String       @db.VarChar(20)
  shipping_cost Float        @default(300) @db.Real
  account       account      @relation(fields: [email], references: [email], onDelete: Cascade)
  order_list    order_list[]
}

model cart {
  cart_id     Int         @id @default(autoincrement())
  total_items Int
  cart_list   cart_list[]
}

model cart_list {
  cart_id    Int
  product_id Int
  units      Int     @default(1)
  cart       cart    @relation(fields: [cart_id], references: [cart_id], onDelete: Cascade)
  product    product @relation(fields: [product_id], references: [product_id], onDelete: Cascade)

  @@id([cart_id, product_id])
}
